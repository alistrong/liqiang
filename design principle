软件开发中，对软件系统的设计和开发总结了一些原则和模式，下面列举了开发原则
1 单一职责原则
 一个类，最好只做一件事，即做到低耦合，高内聚的延伸。
 一个类承担的责任越多，被复用的可能性越小，但是承担的责任过多，相当于将这些职能耦合在一起，当其中一个变化时，可能会影响其他职责的运行。
举例：springMVC中的entity，dao,service,controller

2 开放封闭原则
  对扩展开发，对修改关闭
  一个好的系统在不修改源代码的情况下，可以扩展你的功能，实现开闭原则的关键是抽象化
  当软件实体因需求变化时，尽量通过扩展已有软件实体，提供新的行为，而不是修改已有代码。已有的软件模块，抽象层的模块不要再改；
  可变性要封闭起来即找到系统可变因素，将它封装起来。
 举例：观察者模式就是开闭原则的体现
      策略模式，如果需要新的策略，只需实现接口，不改变核心逻辑，eg Collection.sort()方法，实现自己的comparator接口。
 
3 里是替换原则
  任何基类出现的地方，子类也可以出现，这个表现对继承机制的约束，只有子类能够替换基类，才能保证系统在运行期间识别子类。

4 接口隔离法则
  客户端不应该依赖那些它不需要的接口
  每一个接口应该承担一种相对独立的角色，而不使用单一的总接口
  
5 依赖倒置原则
  要依赖抽象，而不要依赖具体的实现，高层模块不依赖底层模块，两者共同依赖抽象。
  即针对接口编程，不针对实现编程
  
6 合成、聚合复用原则
  尽量使用对象组合，而不是继承关系达到软件复用的目的
  也就是在一个新的对象里面使用一些已有的对象，使之成为对象的一部分，
 
7 迪米特法则
  系统中的类，尽量不要与其他类相互作用，减少类之间的耦合度
  又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解，一个类应该对自己需要耦合或者调用的类知道最少，
