//动态规划
1.抢到抢劫，不能抢相邻的租户,求最大的盈利
public int maxRob(int nums[]){
    int n = nums.length;
    if(nums==null || n==0){
        return 0;
    }
    if(n==1){
        return nums[0];
    }
    int pre = 0;
    int pre1 = 0;
    int pre2 = 0;
    for(int i=0;i<n;i++){
        int cur = Math.max(pre1,pre2)+nums[i];
        pre2 = pre1;
        pre1 = pre;
        pre = cur;
    }
    return Math.max(pre,pre1);
}

2.母牛生产，三年
f(i) = f(i-1)+f(i-3);

3.最大子数组和
public int maxsum(int a[]){
    if(a ==null || a.length==0){
        return 0;
    }
    int sum = 0;
    int max = Integer.MAX_VALUE;
    for(int i=0;i<a.length;i++){
        sum = sum +a[i];
        if(sum>max){
           max = sum;
        }
        if(sum <0){
           sum =0;
        }
    }
    return max;
}

4.分割整数的最大乘积
public int maxMulti(int num){
    
}
