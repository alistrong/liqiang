 ^, &, |

利用 A ^ A = 0, 可以消掉一些数中的重复的数
利用 A ^ 1 = ~A, 可以得到A的位级的反转
A & (-A) 得到A的位级最低的一位
利用 A | 0 = A, A & 1 = A
A & (A-1) =  去除A的位级表示中最低的那一位
判断奇偶数 n%2==0    n&1 ==1
不使用辅助变量的前提下交换两个数：x = x ^ y; y = x ^ y ; x = x ^ y;
2的n次方：如果一个x &(x-1) ==0 则这个x是2的幂次方的数
n&n-1, 作用是可以消除数字n的二进制表示中最后一个1.可以用来检测2的幂
异或操作可被用于无进位加法使用，与操作可以用来获取进位，（因此可以使用这两个运算可以完成在不使用+，-情况下两个数相加操作）


//统计二进制x中1的个数
public static int num1(int x){
    int count = 0;
    while(x>0){
        if(1== x&1){
            count++;
        }
        x = x>>1;
    }
    return count;
}

//非空数组，除了某个元素只出现一次外，其余每个元素出现两次，找出只出现一次的元素
public static int onlyOne(int nums[]){
    int res = 0;
    for(int i=0;i<nums.length;i++){
        res=^nums[i];
    }
    return res;
}

//找出数组中不重复的两个数

public static int[] get(int nums[]){
    int result[] =new int[2];
    int res = 0;
    for(int num:nums){
        res = res^num;
    }
    int flag = res&(-res);
    while(int num:nums){
        if((num&flag) == 0){
            result[0] = result[0]^num;
        }else{
            result[1] = result[1]^num;
        }
    }
    return result;
}



数学计算：
1 计算a的b次幂，然后取余c 即(a^b)%c，其中b是数组格式，不可用整数表示
   问题1 如何处理数组问题：eg a^[1,5,6,4] = a^4 * a^[1,5,6,0] = a^4 * (a^[1,5,6])^10 ,即问题规模一点一点缩小
   问题2 如何处理mod运算：对于（a*b）%c很可能在求余之前就溢出了，因此 (a*b)%c = ((a%c)*(b%c))%c
   //对a的k次幂然后求模base
   pow(int a,int k,int base){
       a%=base;//对每个因子求模
       int res = 1;
       for(int i=0;i<k;i++){
           res*=a;
           res%=base;
       }
       return res;
   }
   从上面这道高效的题中抽离如何计算幂等的问题
   a^b =  a * a^(b-1)   当b是奇数时
       =  (a^(b/2))^2   当b是偶数时
   对于^2这样的运算相当于折半计算，变成log级别的运算。
   int pow(int a,int k){
       if(k==0){
           return 1;
       }
       if(k%2==0){
           return pow(pow(a,k/2),2);
       }else{
           return pow(a,pow(a,k-1));
       }
   }
   
   
   


