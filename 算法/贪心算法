1 贪心算法

贪心算法在于作出选择时，每次都要选择对自身最为有利的结果，保证自身利益的最大化。简单描述为 大事化小，小事化了，对于一个较大的问题，通过找到与子问题的
重叠，把复杂问题划分为多个小问题，对每个子问题进行求解，找出最值，依次处理，而才能够得到最终结果。
不是从整体最优考虑，所作出的仅是某种意义上的局部最优解，算法设计的关键是贪心策略的选择，贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备
无后效性，即某个状态以后的过程不会影响之前的状态，只跟当前状态有关。

应用：求最小生成树Prim算法中，挑选的顶点是候选边中权值最小的边的一个端点，这种每次在执行子问题的求解时，总是选择当前最优的情形，就是贪心的含义

算法流程：
1 建立数学模型描述问题
2 把求解的问题分成若干个子问题
3 对每个子问题求解，得到子问题的局部最优解
4 把子问题的局部最优解合成原来问题的一个截

伪代码

从问题的某一初始解出发
      while(能朝给定总目标前进一步)
         do 选择当前最优解作为可行解的一个解元素
      由所有解元素组合成问题的一个可行解
    
    
eg[最大整数] 设有n个整数，将它们连接一排，组成一个最大的多位整数
例如：n =3时，3个整数 13,312,343 连成最大的整数为 34331213
     n =4时，4个整数 7 ，13,4,246 连成最大的整数为 7424613
     
利用贪心思想来做，但是不是把各个整数按照从大到小的顺序连接起来，正确标准：把整数转成字符串，比较a+b和b+a，如果a+b>b+a，则把a排在b前面

for(int i=0;i<array.size();i++){
   for(int j= i+1;j<array.size();j++){
       if((array.get(i)+array.get(j)).compareTo(array(j)+array.get(i))<0){
           String temp = array.get(i);
           array.set(i,array.get(j));
           array.set(j,temp);
       }
   }
}
for(int i=0;i<array.size();i++){
    str +=array.get(i);
}
return str;
      
