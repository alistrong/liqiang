回溯
解决一个回溯问题，实际上就是一个决策树的遍历过程
1 路径：也就是做出的选择
2 选择列表：当前可以做的选择
3 结束条件：达到决策树底层，无法再做选择的条件

套路框架

result = []

def backtrack(路径，选择列表)：
   if 满足结束条件：
       result.add(路径);
       return
   for(选择 in 选择列表){
       做选择
       backtrack(路径，选择列表)
       撤销选择
   }


以全排列问题说明

我们这次讨论不重复的数字

比如【1,2,3】

List<List<Integer>> res = new LinkedList<>();

List<List<Integer>>  permute(int nums[]){
    LinkedList<Integer> track = new ListedList<>();
    backtrack(nums,track)
    return res;
}

void backtrack(int nums[],LinkedList<Integer> track){
    if(track.size() == nums.length){
        res.add(new LinkedList(track));
        return;
    }
    
    for(int i=0;i<nums.length;i++){
        if(track.contains(nums[i])){
            continue;
        }
        track.add(nums[i]);
        backtrack(nums,track);
        track.removeLast(nums[i]);
    }
}

回溯算法，时间复杂度不可能低于O(N!)，因为穷举整个决策树是无法避免的，这也是回溯算法的一个特点，不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举
，复杂度一般很高。

回溯算法就是多叉树的遍历问题，关键是在前序遍历和后序遍历做一些操作，
在写backtrack()函数时，需要维护走过的路径和当前可以做的选择列表，当触发结束条件时，将路径计入结果集。

某种程度动态规划的暴力求解就是回溯算法，只是有的问题具有重叠子问题性质，可以用dp table或者备忘录优化，将递归大幅剪枝，就变成动态规划了，而如果问题没有
重叠子问题，就是回溯算法了。

