ThreadPoolExecutor 
线程池提供了一种限制和管理资源，有如下好处：
1 降低资源消耗，通过重复利用已创建的线程降低线程创建和销毁造成的消耗
2 提高响应速度，当任务打到时，任务可以不需要等到线程创建就能立即执行
3 提高线程的可管理性，线程是稀缺资源，如果无限创建会消耗资源而且会降低系统的稳定性

ThreadPoolExecutor 构造方法的几个重要参数
corePoolSize 核心线程数，定义了最小可以同时运行的线程数量
maximumPoolSize 最大线程数，当队列中存放的任务已达到队列容量时，可以同时运行的线程数量
workQueue 当新任务来是时候会先判断当前运行的线程数是否达到核心线程数，如果达到的话，新任务就会被存放到队列中

keepAliveTime 当线程池中的线程数量大于corePoolSize时，如果没有新任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了keepAliveTime
unit 时间单位
threadFactory 线程工厂，创建新线程
hander 饱和策略，当同时运行的线程数量达到最大线程数而且队列已经被放满时，对新任务定义了处理方式
AbortPolicy ：，抛异常，直接抛弃
CallerRunsPolicy：调用执行自己的线程运行任务，
DiscardPolicy: 直接丢弃
DiscardOldestPolicy:抛弃最早未处理的任务

executor.execute(worker)
1 判断核心线程池是否满了，没有满，建新的线程去处理任务
2 如果满了，判断等待队列是否满，没有满，放入队列
3 如果满了，判断线程池是否达到最大线程数，没有，则创建新的线程去处理
4 如果达到最大线程数，按照策略去处理



