CopyOnWriteArrayList{
    final transient ReentrantLock lock = new ReentrantLock();
    private transient volatile Object[] array;
    
    public boolean add(E e){
        final ReentrantLock lock = this.lock;
        lock.lock();
        try{
            1 复制一个新的数组
            2 插入新值
            3 将新的数组指向原来的引用
            return true;
        }finally{
            lock.unlock();
        }
    }
}

增删改都需要获取锁，锁只有一把，而读操作不需要获取锁，支持并发

适用读多写少场景，
但是 1 内存的使用，内存可能会存在两个array，不适合大数据量的场景
    2 只保证最终一致性，不保证实时一致性--读操作读到的数据只是一份快照。
