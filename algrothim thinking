子序列问题

一般涉及到子序列和最值，几乎可以肯定考察的是动态规划技巧，时间复杂度一般是O(N^2)
既然要用动态规划，就要定义dp数组，找状态转移关系

两种思路：
1 一维dp数组
int n = array.length;
int []dp = new int[n];
for(int i=1;i<n;i++){
    for(int j=0;j<i;j++){
        dp[i]=最值（dp[i],dp[j]+..）
    }
}
例如：最长递增子序列 
给定一个无序整数数组，找到其中最长递增子序列
input:[10,9,2,5,3,7,101,18]
output:4  [2,3,7,101]

解法1 ： 动态规划
dp数组，dp[i]表示以nums[i]这个数结尾的最长递增子序列的长度，我们假设dp[0..,i-1]都已经计算出来了，然后通过以上结果计算dp[i]?
eg index  0  1  2  3  4  5
   nums   1  4  3  4  2  3
   dp     1  2  2  3  2  3
   
思考，nums[5] = 3 如果计算dp[5]呢, 找前面比3小的数字，然后对应的dp[j]+1 result = Max{dp[j]+1}
即for(int j = 0 ; j< i ; j++){
    if(nums[j]<num[i]){
        dp[i] = Max.max(dp[i],dp[j]+1);
    }
}

解法2：二分查找

这个解法时间复杂度是O(nLogn)

子数组array[0...i]中，以array[i]结尾 的目标子序列（最长递增子序列）的长度是dp[i]
2 一个二维的dp数组
int n = arr.length;
int [][] dp = new dp[n][n];

for(int i=0;i < n;i++){
    for(int j = 1;j<n;j++){
        if(arr[i]==arrp[j])
            dp[i][j] = dp[i][j]+...
        else
            dp[i][j] = 最值（...）
    }
}
2.1 只涉及两个字符串/数组时（比如最长公共子序列） 
  在子数组arr1[0..i]和子数组arr2[0...j]中,我们要求的子序列（最长公共子序列）长度为dp[i][j]
2.2 只涉及一个字符串/数组时（最长回文子序列）
  在子数组arr[i...j]，我们要求的子序列（最长回文子序列）的长度为dp[i][j]
