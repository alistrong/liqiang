大类上JUC分为以下几种：

1 并发容器：ArrayBlockingQueue,ListedBlockingQueue,.....
2 同步设备：
3 锁:
4 原子对象：
5 线程池：

并发容器详解:

class ArrayBlockingQueue<E> extends AbstractQueue implements BlockingQueue<E>{
    final Object[] items;
    int takeIndex;
    int putIndex;
    int count;
    final ReentrantLock lock;
    private final Condition notEmpty;
    private final Condition notFull;
    public ArrayBlockingQueue(int capacity,boolean fair){
        this.items = new Object[capacity];
        lock = new ReentrantLock(fair);
        notEmpty = lock.newCondition();
        notFull = lock.newCondition();
    }
    public boolean offer(E e){
        checkNotNull(e);
        finalReentrantLock = this.lock;
        lock.lock();
        try{
            if(count == item.length) return false;
            else enqueue(e); return true;// enqueu() 里往队列里加数据,索引位置变化，count++; notEmpty.signal();
        }finally{
            lock.unlock();
        }
    }
    public E poll(){
        final ReentrantLock lock = this.lock;
        lock.lock();
        try{
            return (count==0)?null:dequeue();//获取数据，索引变化，count--，notFull.signal();
        }finally{
            lock.unlock();
        }
    }
    
    class LinkedBlockingQueue {
        static class Node<E>{ E item; Node<E> next; Node(E x){item = x;}}
        private final int capacity;//容量
        private final AtomicInteger count = new AtomicInteger();//当前个数
        transient Node<E> head;
        private transient Node<E> last;
        private final ReentrantLock takeLock = new ReentrantLock();
        private final ReentrantLock putLock = new ReentrantLock();
        private final Condition notEmpty = takeLock.newCondition();
        private final Condition notFull = putLock.newCondition();
    }
    
    对比：LinkedBlockingQueue 支持两个锁，put和taken两个锁，某些操作单独加各自的锁，不冲突，加速吞吐量；利用AtomicInteger保证两个锁变化数据可见；
         一个链表，一个数组，初始化时Linked有默认MAX,Array必须传入一个值
         
    
    
    
同步设备：
    CountDownLatch: 并发工具类，允许一个线程或多个线程等其他线程操作执行完后再执行
    class CountDownLatch{
        private final Sync sync;
        public CountDownLatch(int count){this.sync = new Sync(count);}
        public void await()throws InterruptedException{sync.acquireSharedInterruptibly(1);}
        public void countDown(){sync.releaseShared(1)}
        public long getCount(){return sync.getCount();}
    }
    核心是Sync implements AQS{
        Sync(int n){setState(n);}
        int getCount(){return getState();}
        tryAcquireShared(int acquires){return (getState()==0? 1:-1);}
        tryReleaseShared(int releases){}
        ......
    }
    下面详细讲解AQS
    AQS主要包括一个int类型的state共享变量来表示同步状态和一个FIFO组成的等待队列，同步状态的释放和获取需要同步器自己去定义具体逻辑，而状态的改变和
    阻塞和等待的机制由AQS自己已经定义实现，对同步组件来说不关系。
    
    共享资源volatile int state {三种方式访问，setState(),getState(),compareAndSetState()},线程等待队列（多线程争用资源阻塞会进入此队列）FIFO
    两种共享方式：同时实现独占和共享两种方式，如ReentrantReadWriteLock
    1 Exclusive (独占，只有一个线程能执行，ReentranLock)
    2 Share(共享，多个线程可同时执行，eg Semaphore CountDownLatch)
    不同的共享器需要自己去实现那个获取state和释放state方法，即以下方法
    tryAcquire();tryAcquireShared();tryRelease();tryReleaseShared()
    其他的(等待通知机制)队列维护AQS已经做好了
    AQS里面的acquire()流程：
    1 调用自定义同步器tryacquire()尝试获取资源尝试，成功返回
    2 没成功，调addWaiter()进入等待队列队尾并标记独占模式
    3 acquireQueue()使线程在等待队列中休息，有机会（unpack()或者中断）会尝试获取资源，获取资源返回，在等待过程中被中断返回true，否则false
    4 在等待过程中如果被中断，是不响应的，只有获取资源再进行自我中断。
    
    Condition详解：
    内部维护等待队列，所有调用condition.wait()都会进去等待队列中，同时释放lock,
    
    CyclicBarrier:回环栅栏 让一组线程等待到达某种状态之后再开始全部执行
    
    Semaphore：信号量，控制同时访问的线程个数，与锁有点类似，控制共享资源的访问权限
    class Semaphore{
        public Semaphore(int permits)//默认非公平方式， public Semaphore(int permits,boolean fair);
        private final Sync sync;
        void acquire();//获取前线程一直阻塞
        void release();//释放信号量
    }
    
锁：
    1 ReentrantLock
    Class ReentrantLock{
        private final Sync sync;
        public ReentrantLock(){sync = NonfairSync()} public ReentrantLock(boolean fair){sync = fair? new FairSync() : new NonFairSync()}
        public void lock(){sync.lock();}
        public boolean tryLock(){return sync.nonfairTryAcquire(1);}
        public void unlock(){sync.release(1);}
        public Condition newCondition(){return sync.newCondition();}
    }
    首先介绍写锁的实现：
    同一时刻写锁不能被多个线程获取到，很显然写锁是独占式锁，写锁的同步语义是通过重新tryAcquire，tryrelease方法来实现,读锁通过tryReleaseShared()
    // 可重入的独占锁，同步通过实现AQS，锁的竞争依靠CAS和Unsafe

    2 ReentrantReadWriteLock
    Class ReentrantReadWriteLock{
        private final ReentrantRederWriteLock.ReadLock readerLock;
        private final ReentrantRederWriteLock.WriteLock writeLock;
        final Sync sync;
    }

原子类操作：
    工具类 AtomicInteger
    class AtomicInteger{
        private static final Unsafe unsafe = Unsafe.getUnsafe();
        private static final long valueOffset;
        private volatile int value;
        public final int addAndGet(int n){}//以原子方式将输入的值与实例中原值相加，并返回最新的值
        public final int incrementAndGet() //以原子方式将实例中的值进行加1操作，并返回最新的值
        public final int getAndSet(int n)//将实例中的值更新为输入的值，并返回之前的值
        public final int getAndIncrement(){return unsafe.getAndAddInt(this, valueOffset, 1);}//以原子方式将实例中的值进行加1，并返回以前的值
        //原子类的操作主要依靠Unsafe类的compareAndSwapInt()类似的接口来保证
    }
    工具类 AtomicIntegerArray //原子更新数组类型，在之前的基础上，加上index字段来确定更新的位置
    工具类 AtomicReference //
    .....
    

线程池：
1 为什么用线程池：线程很占用系统资源，如果对线程管理不善的话很容易出问题，一般利用线程池对线程进行管理，（1 通过复用线程来减少线程的创建和销毁带来的
性能损耗，2 线程是稀缺资源，无限次创建会消耗资源，并且降低系统的稳定性，所以用线程池来管理）
2 线程池工作原理： 首先判断核心线程数是否已满（都在执行任务）,没有则创建一个核心线程来处理任务，否则进入判断等阻塞队列是否已满，没有满则进去队列，否则
  判断线程池中所有线程是否都在执行任务(max thread)，没有，则创建线程处理任务，否则handler处理（抛弃）
3 具体源码：
  ThreadPoolExecutor{
      private volatile int corePoolSize;//核心线程个数
      private volatile int maximumPoolSize;//最大线程个数
      private volatile long keepAliveTime; // 空闲线程存活时间，如果当前线程超过了corePoolSize且超过time，
      private final BlockingQueue<Running> workQueue;//阻塞队列
      private volatile ThreadFactory threadFactory;//线程工厂
      private volatile RejectedExecutionHander hander; //处理策略
   }
      处理策略包括（直接抛弃，抛弃并抛异常，利用调用者线程处理，丢弃阻塞队列中排队最久的任务，执行）
 4 线程池关闭：
  shutdown和shutdownNow原理都是遍历线程池中的线程，依次中断线程，
  shutdownNow:将线程池状态标为stop状态，然后尝试停止所有执行和未执行的任务的线程，
  shutdown:将线程池标为shutdown状态，然后中断未执行任务的线程，
  可以看出shutdown会等待正在执行的线程执行完任务后，shutdownNow会一视同仁，isShutdown和isTerminated
 5 线程池的参数配置（从不同角度来设置）：
  从任务的性质：如果是CPU密集的，尽可能配置少的线程数，如核数+1, 如果是IO密集型的即需要大量等待IO操作的，线程不是一直在执行任务的，配多一点2*核数
  从任务的优先级：可以用PriorityBlockingQueue来保证优先级，

Future,FutureTask等异步调用结果介绍
  在多线程实现模式中，不管是Thread还是Runnable都没办法获取运行的结果，Future表示一个可能没有完成异步任务的结果，针对这个结果添加Callable来做处理
   interface Future<V>{
       boolean cancel();
       boolean isCancelled();
       boolean isDone();
       V get() throws InterruptException;
       V get(long timeOut,TimtUnit unit) throws ...;
   }//Future就是对Runnable或者Callable任务的执行结果进行取消或者判断是否完成和获取结果，get()任务结果会阻塞到任务完成
   interface RunnableFuture<V> implements Future<V>,Runnable{
       void run();
   }
   interface Callable<V>{
       V call() throws Exception;
   }
   class FutureTask implements RunnableFuture<V>{ //可以看出FutureTask可以做为Runnable运行线程，又可以作为Future获取运行结果
       private Callable<V> callable;
       public FutureTask(Callable<V> callable){ this.callbale = callable;};
       public FutureTask(Runnable runnable,V result);
   }
   使用上，FutureTask作为Runnable接口使用 new Thread（ new FutureTask(task implements Callable)） thread.start(); futureTask.get()
   另外Task implements Callabe<V>{} Future<Integer> future =  ExecutorService.submit(task); future.get();
   
   
   
   
  
