IO与NIO的区别
   IO是面向流的，即每次从流中读一个或者多个字节，直至读取所有字节，没有缓存在任何地方；另外一方面IO是阻塞的，意味着线程在调用read()和write()函数时，
   该线程被阻塞，直到有数据读取或者写入，该线程在此期间不能干任何事情了。
   NIO是面向缓冲区的，且是非阻塞模式，一个线程从通道发送读取数据时，它仅能得到目前可用的数据，如果目前没有可用数据，就什么都不获取，而不是保持线程堵塞，
所以直到有数据可以读取之前，该线程可以继续干其他事情。所以一个单独的线程可以管理多个输入和输出通道

选择器selector:java NIO的选择器允许一个单独的线程来监控多个输入通道，也可以注册多个通道使用一个选择器，
channel:NIO中通道，主要包括FileChannel,SocketChannel,ServerSocketChannel,DatagramChannel.既可以从通道读取数据，可以写数据到通道，可以异步读写
buffer:与上述channel交互，从通道读入到缓冲区，从缓冲区写入到通道，本质是一块内存，被包装成NIO Buffer对象，过程如下：写入数据到Buffer,调用flip()方法
       从buffer读取数据，调用clear()或者compact()。capacity，position，limit

普通IO例子
服务端
byte bs[] = new byte[1024];//客户端的数据
ServerSocket serverSocket = new ServerSocket();
serverSocket.bind(new InetSocketAddress(9876));
while(true){
    Socket socket = serverSocket.accept();//阻塞
    socket.getInputStream().read(bs);
}
客户端发送数据
Socket socket = new Socket();
socket.connect(new InetSocketAddress(ip,port));
socket.getOutPutStream.write("content".getBytes());



