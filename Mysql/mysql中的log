问题引入：数据库如何保证原子性
首先先知道数据库涉及到的几个log，bin log; redo log; undo log
1 bin log:
binlog记录了数据库表结构和数据更新记录，可以简单理解存储着每条变更的sql语句（不包含select语句）
一般用bin log做恢复和复制数据
mysql一般都是主从结构，从数据库需要与主服务器上的数据保持一致，就是通过binlog来实现的。
如果mysql的数据被干掉了，也可以通过binlog进行数据恢复。

2 redo log
首先了解一下一个update set name = 'lisi' where id = 3;这条语句，查找id=3的这条记录，然后把name改成lisi,
我们知道mysql的基本存储结构是页（页中存放记录信息），所以mysql先查找这条记录所在的页，读取到内存中，对该记录进行修改，
现在有个问题，如何内存中的记录修改了，但是机器宕机了，磁盘中的记录的修改就丢失了。
如果每次修改都要落盘才返回，这样效率太低，速度太慢，扛不住。（一般是异步刷新到磁盘，由配置参数控制频率时间）此时mysql引入了redo log机制，
正常内存写完了，会写入到redolog中，redolog中会记录这次在那个页修改了什么记录
其实真是写redolog时，会先写buffer中，然后由配置刷新到redolog文件中。
更新操作----》内存修改------》异步刷新到磁盘
       ----》buffer-------->redolog
虽然redoLog也需要写磁盘，但是是顺序IO相对来说比较快。

看上去redo log和bin log很像，都能做数据恢复。但是其他点是不相同的。
bin log记录的是sql语句（update,insert,delete），即属于逻辑变化，而redolog记录的是物理修改的内容（那个页做了什么修改），即物理变化
redo log就是持久化而生的，正常内存数据修改完，没有落盘，机器宕机，这个时间就是通过redolog来重新恢复数据保证持久化的。

3 undo log
作用：回滚和数据多版本控制
在进行数据修改时，不仅仅记录了redolog，而且还要写undo log，某些原因导致事务失败了，可以用undo log进行回滚。
undo log也是记录的是逻辑记录，比如一条insert语句，undo log里面会记录对应的delete语句，可以理解，回滚嘛，跟正常操作刚好相反，undo log记录着修改
之前的数据版本，可以实现MVCC机制。
