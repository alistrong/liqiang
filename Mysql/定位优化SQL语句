explain查询sql执行计划

1 select type:
    1.1 simple查询，不需要union操作或者不包含子查询的简单select查询
    1.2 primary查询，一个需要union操作或者包含子查询的select查询，位于最外层的单位查询的select_type为primary
    1.3 subquery查询，除了where里包含的子查询，其他地方出现的子查询也叫subquery
    1.4 union：union连接的两个select查询，第一个查询是dervied派生表，除了第一个表外，第二个以后的表select_type都是union

2 type列：一个好的sql语句要打到range级别，尽量避免all级别
    常用的性能从好到不好：system>const>eq_ref>ref>range>index>all ，一般至少到range
    system:表中只有一行数据或者是空表时，且只用于mysiam或者memory表，如果时innodb，就是index或者all
    const:使用唯一索引或者主键，返回记录一定是一行记录where等值条件
    eq_ref:出现在要连接多个表查询中，驱动表只返回一行记录，且这行数据是第二个表的唯一索引或者主键，而且not null,
    full_text: 全文索引检索，全文索引的优先级很高，若全文索引和普通索引同时存在，优先全文索引
    range：索引范围扫描，常见于使用>,<,is null,between ,in ,like等运算符的查询中。
    index:索引全表扫描，把索引从头到尾扫一遍，使用索引列就不需要读取数据文件，eg select id from user
    all:全表扫描
    
3 key列：查询真正使用的索引列，
4 rows列：扫描的行数，预估值
5 extra列
    using filesort：排序时无法使用到索引时，就会出现这个。常见于order by和group by语句中
    using index：查询时不需要回表查询，直接通过索引就可以获取查询的数据
    using temporary：表示使用了临时表存储中间结果
    using where：表示存储引擎返回的记录并不是所有的都满足查询条件，需要在server层进行过滤

优化点：

1 select语句指明字段名称，select * 会产生更多的消耗，使用覆盖索引的可能性，避免回表，
2 只需要一条数据时，加上limit 1.
3 使用合理的分页方式提高分页查找
4 避免where子句（对字段进行null值判断）（字段含有表达式）（隐式转换）(避免使用！或者<>)（使用or导致后面用不到索引），会导致放弃索引使用全表扫描
5 避免%前缀匹配
6 联合索引，尽量满足最左匹配原则

上面都是针对sql语句的优化点
下面从宏观角度说一下数据库的优化技巧
1  较少数据访问
    1.1 建合适的索引
    1.2 尽量通过索引访问数据
2  返回更少的数据
    2.1 分页返回数据
    2.2 只返回需要的字段
3  减少交互次数
    3.1 批量操作
    3.2 对于in的操作
4  减少数据库CPU的运算
    4.1 使用绑定变量
    4.2 合理排序，减少比较操作
    4.3 对于复杂运算可以放到客户端处理
5  合理运用资源
    5.1 客户端多进程并发访问
    5.2 数据库并行处理
    
 以复杂查询语句为例说明优化的一点总结：
 1 mysql的嵌套子查询效率确实比较低
 2 可以将嵌套子查询转化为连接查询
 3 连接表时，可以先用where条件对表进行过滤，然后做表连接








