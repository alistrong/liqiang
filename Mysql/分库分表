为什么要分库分表
用过那些分库分表中间件及各自优缺点
如何进行水平垂直拆分

why?
肯定扯到高并发了，为了支撑高并发，数据量大两个问题
分库分表是两回事，当用户量大，请求量大时，单表的数据量太大，会极大影响sql执行性能 ，单表差不多百万的时候，性能就差了，就需要分表了
啥是分表？就是把一个表的数据放到多个表中，然后查询的时候就差一个表。
比如按照用户id来分表，将不同用户分到不同的表中。
啥是分库，就是因为一个库一般来说最多支撑并发2000，一定要扩容，一个健康的单库并发值最好保持1000/s，这个时候你就可以将一个库的数据拆分到多个库中，


what中间件
比较常见的是 cobar,TDDL, atlas,sharding-jdbc,mycat
cobar：阿里团队，属于proxy方案，近些年没人更新，差不多被抛弃，而且不支持读写分离，存储过程，跨库join和分页操作

TDDL：淘宝团队，属于client层方案，不支持join,多表查询等语法，一般基本的CRUD，支持读写分离，使用的也不多，而且依赖淘宝的diamond配置管理系统

atlas: 360开源，属于proxy方案，最近也没人更新维护，用的也很少了

sharding-jdbc:当当开源，属于client方案，支持sql语法较多，推出了2.0版本，支持分库分表，读写分离，分布式id生成，柔性事务，算是比较活跃的社区。

mycat:基于cobar改造，属于proxy方案，支持功能完善，非常火的数据库中间件，相对来说 很年轻。

client方案：优点在于不用部署，运维成本低，不需要代理层的二次转发请求，性能高，但是需要遇到升级，各个系统都要重新升级版本发布，
proxy方案：需要专门部署，及运行一套中间件，运维成本高，好处对业务透明，如果要升级，中间件团队自己搞就行。

如何水平垂直拆分
水平拆分：就是把一个表的数据给弄到多个库的多个表里，但是每个库的表结构都一样，水平拆分就是将数据均匀放更多的库里，用多个库抗高并发。用多个库抗容量。
垂直拆分：将一个很多字段的表拆分成多个表，每个库表的结果都不一样，每个库表包含部分字段，一般来说将较少的访问频率很高的字段放到一个表里，频率很低放到
另外一个表里。

基于中间件，可以根据你指定的某个字段值，比如userid，自动路由到对应的库上，然后自动路由到对应的表里。
一般分开分表有几种方式：
1 按照range来分，就是每个库一段连续的数据，比如按照时间，这种较少使用，容易产生热点，大量的流量打到最新的数据上，好处在于，如果扩容很容易，比如给每个
月准备一个库就行，

2 按照某个字段hash均匀分散，较为常用，但是扩容比较麻烦，有数据迁移这一过程

分库分表步骤：
说先根据容量（当前容量和预估增长量）评估分库或者分表的个数 ------》选择key（尽量均匀）-------》分表规则（hash或者range）-----》执行（一般双写）
--------》扩容问题（尽量减少数据的移动）

对应水平分库分表，拆分策略常用的是hash法
1 非partition key的查询问题 ,利用用户id hash到不同的表，但是端上利用user_name查询
  映射法，保存user_name到userid的映射，先查映射对应的userid，然后查询对应的记录
2 各种分partition key的组合条件查询，
  可以借助es,Hbase查询

扩容问题
   双写迁移法
   一种是同步双写，一种是异步双写
   1 修改对应配置文件和代码，写老库的同时，写新库
   2 对比老库的数据，将老库中的数据复制校正到新库中
   3 直到新库的数据完全是新的，下掉写老库的逻辑





分区概念：
将同一表中的不同行的记录分配到不同的物理文件中，几个分区就有几个.idb文件
每个分区都是独立的对象，可独立处理，对应用来说完全透明，不影响应用的业务处理
分区有利于管理大表，采用分而治之的逻辑，分区引入了分区键的概念，让数据根据不同规则分配在不同区，可以对数据分区，也可以对索引分区
不能使用主键/唯一键字段之外的其它字段分区

正常走分区键索引的话，先走对应分区的辅助索引B+树，再走对应分区的聚集索引B+树
如果没有走分区键，将会在所有分区都会执行一次



