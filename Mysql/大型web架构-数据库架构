1 主从架构
大型系统有上百万的用户，有上千万的数据量，也会有大量的写操作，但是一般情况读操作远远大于写操作，如果读写分离的话，系统性能又有很大提高。

对于mysql 开启主从复制也很简单，需要开启主服务器上的二进制日志，从服务器开启配置和授权
当主服务器开启二进制文件，自动记录所有主服务器的更新操作，从服务器再定时到主服务器获取二进制文件进行重放完成数据的复制，
mysql主从复制原理：数据复制原理主要是slave从master获取binary log文件，然后再本地镜像执行日志中的操作

master                slave
  ||                  /(专门一个IO线程去读取binarylog文件)  
  ||(data change)   /  |
  ||              /    |
  ||            /      |（write）
  ||          /        |
binary log  /        relay log----------(sql thread 去读relay log文件，然后重做里面的操作，从而完成复制)

主从复制是异步完成的，主从数据有一定的延迟，根据业务场景去设置

当主从架构下，写操作消耗CPU超过50%时，再增加从数据库机器是没有什么意义的，这个时候就需要垂直分区技术

2 垂直分区
将原来的数据库中独立的业务分拆开来（分拆出来的数据与其他部分最好不要产生join操作）这样一个库产生三个库，三个库分别部署一主多从，数据库压力就分摊开
分库可以扩展查询，提高查询的性能，每个数据库分区有自己的一小部分数据，例如查询1亿数据，对于单一分区来说需要扫描一亿记录，而如果分50个分区，每个分区仅仅
需要扫描200万数据

3 水平拆分
水平分割意味将同一数据库表中的数据通过特定算法进行分离，分别保存在不同的数据库中，这个分区的原则需要经验和业务，面对数据分区需要找到一个分区索引字段
它必须跟所有记录都有关系，在其他表中作为外键，在使用主键时，不能自增长，必须是业务主键。

  3.1 余数分区 userId % n 简单，但是数据库个数变动，需要重新分布
  3.2 范围分区 0-100000一个分区，100000-200000一个分区，利于扩展，但是热点问题。
  3.3 映射关系分区 保存每个记录对应的分区映射，映射关系庞大，需要将这个映射关系写入数据库，当然可以使用缓存提高性能。

分表可以解决单表数据量导致的查询性能问题，分库可以解决单台数据库机器并发访问压力

简单介绍一个分库分表结合的例子，以用户id为例说明：
常见的路由策略：
1 中间变量 = uid % (库数 * 每个库的表数)
2 库序号   =  (取整)中间变量 / 库数
3 表序号   =  中间变量 % 表数
假如数据库有256个，每个库有1024个表，用户UID = 262145 ，
按照上述路由策略，这个用户被路由到第0个库，第1个表中，这种hash优点是数据均匀，但是数据迁移成本高。

  
  
