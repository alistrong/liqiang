ZooKeeper是一个开源的分布式应用程序协调服务器，为分布式服务提供一致性服务，基于Paxos算法的ZAB协议完成。
背景：有一个服务拆分成多个服务，部署在多台机器上，这个就是一个分布式服务，如何保证各个分布式的组件协调起来，减少系统服务之前的耦合度，分布式事务的处理，
配置整个分布式系统等等。
主要功能包括：分布式事务，配置服务，集群管理，分布式同步等功能
设计分布式必然遇到一个分区容错性的问题，因此需要在系统可用和数据一致性之间做选择。ZK选择了后者，即保证一致性。
为了解决一致性问题，提出了很多算法，2pc两阶段提交，3pc三阶段提交，paxos算法。
举例一个分布式数据一致性的问题，一个秒杀系统拆分成订单系统和积分系统，这两个服务分布在不同机器上，万一消息在传递过程中宕机了，总不能下了订单但是没有积分吧
因此如何保证数据一致性。


ZK的数据模型
数据存储结构与标准的unix文件系统非常相似，都是在根节点下挂在很多子节点，使用znode作为数据节点，znode是ZK中的最小数据单元，每个znode上都可以保持数据，
同时可以挂在子节点，形成一个树形化命名空间，每个znode节点可以有节点类型（持久，持久顺序，临时，临时顺序）和节点状态。
持久节点：一旦创建一直存在，直到删除
持久顺序节点：一个父节点可以为其子节点维护一个创建的先后顺序，这个顺序体现在节点名称上，是节点名称后面添加一个数字，从1开始。
临时节点：与客户端会话生命周期绑定，会话消失则节点消失，临时节点只做叶子节点，不能创建子节点。
临时顺序节点：父节点可以创建一个维护了顺序的临时节点。

会话
客户端与服务端通过TCP长连接维护会话，即保持连接状态。
会话有对应的事件，CONNECTION_LOSS 连接丢失事件；SESSION_MOVED 会话转移事件； SESSION_EXPIRED 会话过期事件；

Watcher机制
watcher是事件监听器，是ZK重要的一个特性，很多特性依赖它，类似于订阅的方式，即客户端向服务端注册指定的watcher,当服务端符合watcher的某些事件，则向客户端
发送事件通知，客户端收到通知后找到自己定义的watcher然后执行相应的回调方法。

ZK的几个典型应用场景
1 选主
ZK是强一致性，能够很好在保证在高并发的情况下创建节点的全局唯一性（无法创建相同的节点），利用这一特性可以让多个客户端创建一个指定的节点，创建成功的就是master
如果master挂了，咋办，
当master节点挂了，是不是代表当前会话断了，即节点没了，我们让其他不是master的节点监听节点的状态，比如我们监听这个临时节点的父节点，如果这个父节点的子节点
个数发生变化，证明这个master节点挂了，这时候触发回调函数重新选主，总的来说，就是利用临时节点，节点状态和watcher来实现选主的功能，临时节点主要用来选主，
节点状态和watcher可以判断master活性和重新选主。

2 分布式锁
利用临时节点的创建来实现。
首先是如何获取锁，因为是创建节点的唯一性，我们可以让多个客户端同时创建一个临时节点，创建成功就证明获取到锁了，然后没有获取到锁的客户端创建一个watcher
进行节点状态监听，如果这个互斥锁被释放了（机器宕机或者客户端主动释放锁），可以利用回调函数重新获取锁。


