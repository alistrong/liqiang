ZooKeeper是一个开源的分布式应用程序协调服务器，为分布式服务提供一致性服务，基于Paxos算法的ZAB协议完成。
背景：有一个服务拆分成多个服务，部署在多台机器上，这个就是一个分布式服务，如何保证各个分布式的组件协调起来，减少系统服务之前的耦合度，分布式事务的处理，
配置整个分布式系统等等。
主要功能包括：分布式事务，配置服务，集群管理，分布式同步等功能
设计分布式必然遇到一个分区容错性的问题，因此需要在系统可用和数据一致性之间做选择。ZK选择了后者，即保证一致性。
为了解决一致性问题，提出了很多算法，2pc两阶段提交，3pc三阶段提交，paxos算法。
举例一个分布式数据一致性的问题，一个秒杀系统拆分成订单系统和积分系统，这两个服务分布在不同机器上，万一消息在传递过程中宕机了，总不能下了订单但是没有积分吧
因此如何保证数据一致性。
两阶段提交协议：
如果follower接受到写请求，会转发给leader节点，首先向所有的server节点发起提案，提案获取超过半数（n+1）个节点认同后，对整个集群进行同步，超过半数的节点
完成同步后，该写请求完成，
但是可用性有降低：在进行leader选取时，整个集群对外是不可用的。
ZK的数据模型
数据存储结构与标准的unix文件系统非常相似，都是在根节点下挂在很多子节点，使用znode作为数据节点，znode是ZK中的最小数据单元，每个znode上都可以保持数据，
同时可以挂在子节点，形成一个树形化命名空间，每个znode节点可以有节点类型（持久，持久顺序，临时，临时顺序）和节点状态。
持久节点：一旦创建一直存在，直到删除
持久顺序节点：一个父节点可以为其子节点维护一个创建的先后顺序，这个顺序体现在节点名称上，是节点名称后面添加一个数字，从1开始。
临时节点：与客户端会话生命周期绑定，会话消失则节点消失，临时节点只做叶子节点，不能创建子节点。
临时顺序节点：父节点可以创建一个维护了顺序的临时节点。

会话
客户端与服务端通过TCP长连接维护会话，即保持连接状态。
会话有对应的事件，CONNECTION_LOSS 连接丢失事件；SESSION_MOVED 会话转移事件； SESSION_EXPIRED 会话过期事件；

Watcher机制
watcher是事件监听器，是ZK重要的一个特性，很多特性依赖它，类似于订阅的方式，即客户端向服务端注册指定的watcher,当服务端符合watcher的某些事件，则向客户端
发送事件通知，客户端收到通知后找到自己定义的watcher然后执行相应的回调方法。

ZK的几个典型应用场景
1 选主
ZK是强一致性，能够很好在保证在高并发的情况下创建节点的全局唯一性（无法创建相同的节点），利用这一特性可以让多个客户端创建一个指定的节点，创建成功的就是master
如果master挂了，咋办，
当master节点挂了，是不是代表当前会话断了，即节点没了，我们让其他不是master的节点监听节点的状态，比如我们监听这个临时节点的父节点，如果这个父节点的子节点
个数发生变化，证明这个master节点挂了，这时候触发回调函数重新选主，总的来说，就是利用临时节点，节点状态和watcher来实现选主的功能，临时节点主要用来选主，
节点状态和watcher可以判断master活性和重新选主。

2 分布式锁
利用临时节点的创建来实现。
首先是如何获取锁，因为是创建节点的唯一性，我们可以让多个客户端同时创建一个临时节点，创建成功就证明获取到锁了，然后没有获取到锁的客户端创建一个watcher
进行节点状态监听，如果这个互斥锁被释放了（机器宕机或者客户端主动释放锁），可以利用回调函数重新获取锁。

3 集群管理和注册中心
ZK天然支持的watcher和临时节点这些特性
我们可以为每台机器创建临时节点，并监控其父节点，如果子节点列表有变动，我们可以使用在其父节点绑定的watcher进行监控和回调

注册中心也很简单，让服务提供者在ZK中创建一个临时节点并将自己的ip，port，调用方式写入节点，当服务消费者需要调用时，通过注册中心找到相应的服务的地址列表
并缓存到本地。
当服务提供者的某台机器宕机或者下线时，相应的地址会从服务提供列表中删除，同时注册中心将新的服务地址列表发给服务消费方并缓存到消费者机器上，


ZAB原子广播协议，实现数据一致性，主备模型
leader负责处理外部写请求，然后将数据同步到其他follower节点
zk客户端会随机链接到zk集群中的某个节点，如果是读请求，直接从当前节点读取数据，如果是写请求，会转向leader提交请求，leader收到写请求，广播该请求，超过半数节点写成功，则请求提交。

崩溃恢复原子广播协议

1 消息广播流程：
 1.1 客户端发起写操作，leader节点将写操作转化为事务proposal并提供全局的zxid，然后将广播的proposal提案依次放入到队列中，
 1.2 follower节点收到请求后，以事务日志的方式写入到磁盘中，写入成功，则给leader反馈ack消息
 1.3 leader节点收到超过半数的follower节点的ack后，认为发送成功，发送commit消息，
 1.4 从而所有节点完成事务的操作，

2 选主

zxid是一个64位的数字，低32位是简单递增的数字，高32位是leader周期的epoch编号，Zab 协议通过 epoch 编号来区分 Leader 变化周期 
  2.1 一开始默认都投自己，当接受到其他节点的投票后，根据规则，选主zxid最大的最为leader节点，当节点的投票超过半数时，则leading和followeing状态确定
  2.2 恢复阶段，follower发送他们的lastZxid给leader，然后根据lastZxid决定如何同步数据，


