注册中心概念：

服务提供者：RPC server,启动时，向注册中心注册服务，并向Registry定期发送心跳汇报存活状态
服务消费者：RPC client,启动时，向注册中心订阅服务，把注册中心返回的服务节点列表缓存到本地内存中，并与RPC Server建立连接
服务注册中心：保存RPC Server的注册信息，当RPC server节点发生变更时，Registry会同步变更，PRC client感知后刷新本地内存中的缓存的服务节点列表

因此提炼出来注册中心需要提供的能力：

1 提供服务注册接口
2 提供服务注销接口
3 心跳检查，服务提供方通过心跳完成服务状态上报
4 服务查询，拉取服务列表信息
5 服务变更，当服务发生变更时消费者能够感知

另外的维度能力： 服务是高可用的，白名单机制

ZK:
当进行服务注册时，实际上就是在zookeeper中创建一个znode节点，该节点存储了服务的IP、端口、调用方式

zk的心跳机制：定时向各个服务提供者发送请求（实际上建立一个socket长连接）如果长期没有响应，服务中心就认为该服务提供者已经挂了，将其剔除
zk不适合注册中心， 它遵循CP原则，不能提供服务可用性的保证，ZAB协议，为了强一致性。

Eureka:
AP模型，只要有一台服务器在，就能保证服务可用，只不过查到的信息可能不是最新的
运行多个实例来构建集群，即去中心化架构，peer to peer，没有master/slave,节点通过彼此互相注册提高可用性
请求会自动切换，集群中的某台机器宕机，client的请求会自动切换到新的节点
节点之间是进行复制操作
当一个新的Eureka节点启动后，会尝试从邻近节点获取所有注册列表信息，完成初始化，通过心跳契约定期更新


Nacos:
阿里开源，
支持基于DNS和基于RPC的服务发现，




注册中心对比选型：

关于CP还是AP：选择AP，可用性高于一致性，那个需要做的事情少就选择那个，nacos显然帮我们做了很多事情
技术体系：ETCD和Consul基于GO开发，Eureka，Nacos,ZK都是基于JAVA开发，跟自己的技术栈也有关系
高可用：搭建高可用集群
活跃度：

