CAP
Consistency(一致性)
分布式必须要保证数据一致性，不论访问那个节点，访问数据一致

Availability(可用性)


Partition tolerance(分区容错性)
部署在不同节点上，不同节点可能存在网络情况，导致节点之间不可通讯，导致分区的情况

只能满足两个，不用单点，所以必然存在P，就要在C和A之间做选择


Zookeeper(CP)

ETCD(CP)

Consul(CP)

Eureka(AP)

Raft 或者 paxus 算法，强一致算法，一般部署2n+1个节点，n+1个节点可用就可以保证服务可用

简单介绍一下ETCD
官方解释：A highly_available key value store for shared configuration and service disconvery
简单：基于JSON+HTTP的API 可以用curl轻松访问
安全：可选SSL客户认证机制
快速：每个实例每秒支持1000次写操作
可信：基于raft算法实现分布式

场景1 ： 服务发现（即同一个分布式集群中的进程或者服务，如何才能找到对方并建立连接）。本质上服务发现就是想要了解集群中
 是否有进程在监听UDP或者TCP端口，并且通过名字就可以查找和连接。服务发现需要三大支柱
 1 一个强一致性，高可用的服务存储目录，
 2 一种注册服务和监控服务健康状态的机制
 3 一种查找和连接服务的机制
 
 通过服务发现机制，在etcd中注册某个服务名字的目录，在该目录下存储可用的服务节点ip，在使用服务时，从服务目录下查找可用节点
 
 
 
 
 
