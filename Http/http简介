Http 超文本传输协议，即一个在计算机世界里专门在两点之间传输文字，图片，视频等超文本数据的规范和约定。

网络模型
网络是一个复杂的系统，不仅包含应用程序，端系统，交换机等，还有各种各样的协议组成，为了给网络协议的设计提供一个结构，网络设计者以分层方式组织协议，每个
协议属于层次模型之一，

应用层
网络应用程序和网络协议存放的分层，应用层协议很多，eg，HTTP,FTP,SMTP,DNS，我们一般把位于应用层的信息分组称为报文

运输层
在应用程序断点之间传输应用程序报文，主要两种传输协议TCP,UDP；运输层的分组称为 报文段
TCP 面向连接，控制确认报文是否达到，提供拥塞机制可控制网络传输
UDP 无连接，不可靠，没有流量控制， 

网络层
比较重要的协议是IP协议，所有具有网络层的因特网组件必须运行IP协议，IP协议是一种网际协议，除了IP协议还包含一些其他网际协议和路由选择协议， 称为数据报。

链路层
帧

物理层
比特

我们在地址拦输入URL，浏览器会向DNS寻找IP地址，完成URL到IP的映射，然后将请求交给具体的服务器，由服务器返回我们要的结果
主流的web服务器是Apache,Nginx，IIS

与Http协议有关的协议

1 TCP/IP
我们一般称TCP/IP为协议簇，不仅仅包含TPC,IP协议，还有UDP,ICMP,ARP等，是一系列网络通信协议的统称。
TCP协议是控制传输协议，HTTP使用TCP作为通信协议，因为它可靠，保证数据不丢失
IP协议（Internet protocol），解决通信双发寻址的问题，IP协议使用ip地址表示互联网上的每台机器，

2 DNS
 域名系统，将域名和ip地址相互映射的一个分布式数据库。
 
3 URI URL
 URI 统一资源标识符，能够唯一标识互联网上资源
 URL 统一资源定位符，即网址，是URI的子集。
 
4 HTTPS
 HTTP一般是明文传输，很容易被攻击窃取，因此HTTPS应运而生，在HTTP基础上通过传输加密和身份认证保证了传输过冲的安全性，增加了SSL层
 
 HTTP请求响应过程：
 1 DNS服务器进行域名映射，找到对应所在的地址，然后HTTP客户端进程在80端口发起到服务器的TCP连接，这样客户端和服务器进程都会有一个套接字与其相连。
 2 客户端通过它的套接字向服务器发送一个HTTP请求报文，
 3 HTTP服务器通过它的套接字接受该报文，进行请求的解析工作并从存储器中检索出对象，然后把对应对象进行封装到HTTP响应报文中，通过套接字向客户端发送
 4 HTTP服务器随即通知TCP断开TCP连接，实际上是需要等到客户接受完相应报文后才会断开TCP连接
 5 HTTP客户端接受完响应报文后，TCP会关闭。端上解析相应HTML，呈现给用户。
 
 HTTP报文格式
 
 三大部分组成：
 起始行： 描述请求或相应的基本信息
 头部字段：使用key-value更详细地说明报文
 消息正本：实际传输的数据，它不一定是纯文本，可以是图片，视频等二进制数据
 
 起始行和头部字段并成为请求头或者响应头，统称为header,消息正文也叫做实体，称为body,HTTP协议规定每次发送的报文必须有header,但是可以没有body。
 header和body之间必须有一个CRLF回车换行。
 
 请求行 ：（请求方法） 空格 （URL） 空格 （版本号） 回车换行
   HTTP请求方法：
      get方法：请求访问被URI识别的资源，指定的资源经服务器端解析后返回相应内容。
      post方法：传输实体信息。
 
 HTTP请求头部：
 Host:www.someshcool.edu //对象所在的主机，web代理高速缓存
 Connection:close   // 非持久连接，要求服务器在发送完相应的对象后就关闭连接
 User-agent:Mozilla/5.0   // 请求头用来告诉web服务器，浏览器类型 
 Accept-language:fr
 
 
 响应标头 HTTP响应使用的HTTP标头，
 
 200 ok
   响应状态码，2**开头的都表示请求成功响应。
   3**开头表示需要进行附加操作以完成请求，重定向类似
   4**表示客户端发生错误
   5**服务器本身发送错误
 Access-Control-Allow-Origin:*
   它告诉浏览器允许该来源进行资源访问，*通配符告诉浏览器允许任何源访问资源
 Connection:Keep-Alive
 Keep-Alive:timeout=5,max=997 //这个TCP通道可以保持5秒，长连接最多接收100次请求就断开。
    keep-alive:普通模式(非keep-alive)每个请求响应报文都要建议一个链接，完成后立即断开，当使用keep-alive模式后，使得客户端到服务器端的连接持续有效
    即达到TCP连接复用，避免建立过多TCP连接，  
    相对于HTTP的keep-alive，TCP也有一个keep-alive概念，这个主要是保持TCP连接的存活，就是发送心跳包，隔一段时间发送探测包，如果收到ACK,认为连接存活
    ，超过一定重试次数还没收到回应，丢弃TCP连接。
    
    
 Content-Encoding:gzip
 Content-Type:text/html;charset=utf-8
 
 
 
