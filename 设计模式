1.单例模式
整个类只有一个实例，自行实例化向系统提供这个实例
懒汉式
public class Singleton{
    private Singleton(){}
    private static Singleton singleton = null;
    public static Singletion getInstance(){
        if(singleton == null){
            singleton = new Singleton();
        }
        return singleton;
    }
}
线程安全模式： 直接在getInstance()方法上加关键字synchronize，影响性能
推荐线程安全模式的懒汉式写法：

public class Singleton{
     private Singletion(){}
     private static Class InnerClass{
          private static Singletion singleton = new Singleton();
     }
     public static Singleton getInstance(){
          return InnerClass.singleton;
     }
}

饿汉式 线程安全模式
public class Singleton{
    private Singleton(){}
    private static Singleton singleton= new Singleton();
    public static Singletion getInstance(){
        return singletion;
    }
}

2.工厂模式
简单工厂模式
工厂类，有一定的判断和逻辑，由Java中具体类实现
抽象产品类：抽象类或者接口实现，
具体产品类：具体的实现的产品类实现
抽象产品类：
public interface Car{
    public void drive();
}
具体产品类：
public class Benz implements Car{
    public void drive(){
        System.out.println("Benz");
    }
}
工厂类：
public class Driver{
    public static Car get(String type){
        if(type.equals("Benz")){
            return new Benz();
        }
    }
}
Car car = Driver.get("Benz");
car.drive();

//工厂方法模式
抽象工厂类；具体工厂类；抽象产品类；具体产品类
抽象工厂类
public interface Driver{
    public Car drive();
}
public class BenzFactory implements Driver{
    public Car drive(){
        return new Benz();
    }
}
public interface Car{
    public void func();
}
public class Benz implements Car{
    public void func(){
    
    }
}

责任链模式
通常我们业务需求可以拆分成一个个独立的逻辑处理单元并按顺序组合而成，而责任链模式可以很好的链接整个业务流程
责任链是一种行为型设计模式，其基础结构类类似于一个链条，整个链条由一个个单独的链环组成，每个链环就是一个单独的处理单元，
请求过来。hander1--> hander2--> hander3
可以经过几个串行处理，或者在运行时动态确定选择那个单元处理
Spring框架中AOP模块就是使用了责任链设计模式，将目标方法的一次调用过程包装成一条方法调用链来增强目标方法，包括，Before，After，AfterReturing，AfterThrowing,Around五个通用
方法，AOP将这些通知方法和目标方法通过动态代理的方式包装成一条调用链来分别履行各个通知模块的处理单元
try{
   Processor1.process();
   Processor2.process();
   Processor3.process();
   Processor4.process();
}
类似上述代码结构都可以使用责任链模式，
每个单元都有自己独特的处理逻辑，明确各自在流程中的责任，符合类的单一职责原则
构建的责任链可以根据业务需求进行调整及动态插拔满足开闭原则


策略模式同样是设计模式中的一种行为型设计模式
其在结构上的表现就是将可变的算法策略从业务代码逻辑中独立出来，将算法策略形成策略池，从而可以随时替换和更新
当代码中需要根据上下文逻辑选择使用不同业务算法时，可以使用策略模式来优化代码的判断逻辑，避免大量if/else
在整体上满足业务主体逻辑不变，将变化部分抽离出来，形成可以按需扩展的策略思想就行了



3 多线程 生产消费者模式
当生产者和消费者只有一个的时候，这种模式也成为pipe模式，即管道模式，生产者和消费者通过channel来传递数据，数据在通道中以什么顺序传递（1顺序队列，2栈倒叙，
3优先队列-根据权重或者优先级传递），在Java中可以用BlockQueue来实现，下面是一个简单例子

public class Table{
    private final int count;
    private final Queue<String> queue;
    
    public Table(int num){
        this.count=num;
        queue = new ListedList<String>();
    }
    
    public synchronized void put(String food) throws InterruptedException{
        while(queue.size()>count){
            wait();
        }
        queue.offer(food);
        notifyAll();
    }
    
    public synchronized String take() throws InterrputedException{
        while(queue.size()<0){
           wait();
        }
        String food = queue.poll();
        notifyAll();
        return food;
    }
}

基于BlockingQueue来实现更简单，不用自己写wait() notifyAll()
