关于redis介绍
redis 是key/value的内存存储系统，整个数据库加载到内存中进行操作，再定期通过异步操作将数据flush到硬盘进行保存。

value的数据类型可以是String,set,list,hash,sorted set

为便于操作，Redis定义了RedisObject结构体来表示上述数据类型，
struct redisObject{
    unsigned type:4 //表示具体的数据类型，目前5种，2^4=16 足以表示这些类型
    unsigned encoding:4 //表示具体编码方式，同一种数据类型可能有不同编码方式，目前8种（INT,HT,ZIPMAP,LINKEDLIST,ZIPLIST,INTSET,SKIPLIST）
    unsigned lru: REDIS_LRU_BITS //当内存超限时采用LRU算法清除内存对象
    int refcount // 表示对象的引用计数
    void *ptr // 指向真正的存储结构
}
双向链表实现：
由listNode和list两个数据结构组成：
[list]
head----->               [listNode]              [listNode]                  [listNode]
tail----->              pre|value|next         pre|value|next             pre|value|next
dup
free
match
len
//从上述结构中总结性能特征
a. listNode带有pre和next指针，因此链表遍历可以在两个方向进行，从头到尾或者从尾到头
b. list保存了head和tail指针，因此对链表的表头和表尾插入的复杂度都是o(1) ---这是实现LPUSH,RPOP,RPUSH,LPOP的关键
c. list带有len属性，因此计算长度的复杂度是o（1）

字典又名映射或者关联数组，由一集键值对组成，键各不相同，redis选择高效且实现简单的哈希表作为字典的底层实现

dict                   dictht               dictEntry*(bucket)             dictEntry
type                   table--->              0  -->                      key1 | value1 |next --->
privdata               size                   1  -->
ht[2]----->            sizemask               2  -->
rehashidx              used                   3  -->
iterators

跳跃表是一种随机化的数据，这种数据结构以有序的方式在层次化的链表中保存元素

[]  ->  []  ----------------------------------------------------------->
[]  ->  []  --------------> []  -----------> [] ----------------------->
[]  ->  []  --------------> []  -----------> [] ----------------------->
[]  ->  []  -->  []  -----> []  --> [] ----> [] ------> [] ------------>
head    1        2          3       4        5          6                 tail

head 表头负责维护跳跃表的节点指针
1,2.。。 跳跃表节点：保存元素值以及多个层
层 保存指向其他元素的指针
tail 表尾 

1  String
内部存储默认就是字符串，被redisObject所引用，遇到incr,decr操作时，转成数值进行计算，此时redisObject的encoding是int
底层实现有三种：int,raw,embstr. int编码和embstr编码在一定条件下会转化成raw编码对象
int: 8个字节的长整形
embstr：<=39个字节的字符串
raw: >39个字节的字符串，长度动态可变，char buf[];int len;int free; 

2 Hash
redis的hash实际内存存储的Value为一个HashMap,并提供了直接存取这个Map成员的接口
这个HashMap有两种实现方式，成员较少时，为了省内存采用一维数组紧凑存储，此时redisObject的encoding是ziplist
                         当成员多时，转成真正的hashMap,此时encoding是ht
  
3 List
应用场景非常多，eg 关注列表，粉丝列表
实现方式是双向链表，即可以支持反向查找和遍历,当数据较少时，实现结构是压缩列表

4 Set
实现方式是一个value永远是null的HashMap,实际就是通过计算hash的方式来快速排重的
如果一个集合只含有整数且元素不多时使用intset（整数集合）作为底层实现

5 Sorted Set
有序（score）并且不重复的集合列表
内部使用HashMap和跳跃表（SkipList）来保证数据的存储和有序，HashMap里放的是成员到score的映射，跳跃表存放所有的成员
成员较少时，用ziplist。




为什么使用redis：
因为性能和并发，支持数据类型丰富

单线程的redis为什么很快：
纯内存操作，
单线程避免上下文频繁切换，
多路复用I/O模型，

redis过期策略和内存淘汰机制：
定期删除+惰性删除：redis默认每隔100ms定时检测是否有过期的key，有过期的key则删除，但不是对所有的key都进行检测，而是随机抽取
进行检查，这样会导致大量的过期的key并没有被删除，因此有另外一个策略惰性删除，在取key时会检测这个key是否过期，过期就删除。只有这两个策略还是有问题，当没有
去取key时，内存中会有大量的过期的key，因此内存淘汰机制出现了，当需要新写入数据时，发现空间不够，LRU


缓存和数据库数据一致性问题：
首先唯一确定是删除缓存而不是更新缓存，因为lazy加载的模式，因为有时候更新操作涉及好多表，但是又没有读请求，一直更新缓存没啥意义。
对于双写数据库和缓存 删除缓存，后更新数据库这种机制也可能出现脏数据情况（删完后，来了读请求，从而构建了老的缓存，后来才更新成功）
解决方案：当写操作作为唯一标识放入内存队列中，当有读操作时，判断队列中有没有写操作，如果有，先放入队列中，

redis穿透问题：
频繁查询一个不存在的数据，由于缓存没有命中，从而查数据层，缓存失去意义，解决方法：加一层布隆过滤器，过滤掉不存在的key，缓存加空值并设置TTL

redis雪崩问题：
缓存大量失效，导致读取数据库请求大量增加
1 key的过期时间+随机值，防止大量key同一时刻失效
2 互斥锁，分布式锁

并发竞争key问题：
大量同时去set 同一个key
不要求顺序：分布式锁方式，抢到锁进行set操作，
要求顺序：写入数据库的时候，增加一个时间戳字段，
         利用队列，将set方法变成串行访问

RDB持久化：
将当前数据生成快照保存到硬盘中，当redis重启时，可以读取快照文件进行恢复
RDB持久化触发分为手动触发和自动触发
手动触发：save命令和bgsave命令，由于save命令会阻塞redis进程，直到RDB文件创建完毕为止，阻塞期间不能处理任何命令
         而bgsave会创建一个子进程，由子进程创建RDB，父进程继续处理请求，
自动触发：配置文件 save m n, 当m秒内发生n次变化会触发bgsave
         主动复制场景下，从节点全量复制操作，主节点执行bgsave命令，并将RDB文件发给从节点
         执行shutdown命令，自动执行RDB持久化
         
AOF持久化：（相对来说，实时性更好）
追加写入，将每条写命令以redis通讯协议添加到缓冲区aof_buf中，（好处：在大量的写请求下，采用缓冲区暂存一部分命令随后根据策略一次性写入磁盘，减少IO）
append only file，将redis执行的每次写命令记录到单独的日志文件中，当redis重启时再次执行AOF文件中的命令来恢复数据。
首先命令追加，append,将命令追加到缓冲区，并不是直接写入文件，
其次，根据不同策略同步到磁盘文件中
随着写命令越来越多，AOF文件越来越大，需要定期重写AOF文件，减少AOF文件体积，
 重写的策略：1 重复或者无效的命令不写入文件 ，2 过期数据不再写入文件 3 多条命令合并写入
当开启AOF时，Redis启动时会优先载入AOF文件来恢复数据；只有当AOF关闭时，才会载入RDB文件恢复数据。

两种对比：
RDB优点：文件紧凑，体积小，适合全量复制，恢复速度快，对性能影响小，缺点：做不到实时持久化
AOF优点：支持秒级持久化，缺点：文件大，恢复速度慢，对性能影响大。
RDB性能问题：fork操作时，redis主进程会阻塞，写硬盘有IO压力
AOF性能问题：向磁盘写数据频率提高，IO压力更大，可能造成AOF追加阻塞问题，还有RDB的那个性能问题


redis分布式锁
setnx 来争取锁，抢到以后，再用expire给锁加一个过期时间防止忘记释放 （setnx和expire保证原子性，防止中间crash，锁得不到释放）
在加锁的时候，key很关键尽量带一个随机值，等到解锁的时候将对应的key键删除，防止客户端1的请求将客户端2的锁删掉
解锁的时候为了保证原子性，用LUA脚本操作，判断跟当前锁的key值是否相等，是的话删除

eg:
//set命令参数
SetParams params = SetParams.setParams().nx().px(10000);
public boolean lock(String id){
    try{
        for(;;){
            String lock = jedis.set(lock_key,id,params);
            if("OK".equals(lock)){
                return true;
            }
            //否则循环等待，在timeout时间仍未获取到锁，则失败
            long l = System.currentTimeMillis() - start;
            if(l >= timeout){
                reuturn false;
            }
            try{
               Thread.sleep(100);
            }catch(InterruptedException e){
               e.printStackTrace();
            }
        }
    }finally{
        jedis.close();
    }
}

public boolean unlock(String id){
    String script = "if redis.call('get',KEYS[1])  == argv[1] then" +
                         "    return  redis.call('del',KEYS[1]) " +
                         "else"+
                         " return 0 " +
                         "end ";
    try{
       Object result = jedis.eval(script,Collections.singletonList(lock_key), Collection.singletonList(id));
       if("1".equals(result.toString())){
           return true;
       }
       return false;
    }finally{
        jedis.close();
    }
}


Redis实现队列
利用list结构作为队列，rpush生成消息，lpop消费消息，当lpop没有消息时，适当sleep，如果不想sleep，有blpop指令，当没有消息时，会阻塞直到消息到来
延迟队列：
利用sortedset，拿时间戳当score,消息内容作为key调用zadd来生成消息，消费者利用zrangebyscoure获取N秒之前的数据轮询进行处理。




