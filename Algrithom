about	algorithm
1 股票，一次买入卖出，求最大收益
public static int onlyOnceMax(int price[]){
    if(price.length == 0){
        return 0;
    }
    int min = a[0];
    int res = 0;
    for(int i=1;i<price.length;i++){
        if(price[i]<min){
            min= price[i];
        }else if(price[i]-min >sum){
            res = price[i]-min;
        }
    }
    return res;
}
2 股票，可以进行无数次交易，但是买入之前必须先卖出，交易不重叠，求最大收益
public static int noLimitMax(int price[]){
    if(price.length ==0){
        return 0;
    }
    int res = 0;
    for(int i=0;i=price.length-1;i++){
        if(price[i+1]>price[i]){
             res += price[i+1]-price[i];
        }
    }
    return res;
}

3 股票，可以进行两次交易，交易不能重叠，求最大收益,思路：(根据第一个问题，求出两个数组，第一个数组是i节点之前的最大收益，第二个数组是i节点之后的最小收益，相差最大值)
public static int twoMax(int price[]){
    if(price.length < 3){
        return 0;
    }
    int maxRes = 0;
    int first[]  = new int[price.length];
    int second[] = new int[price.length];
    for(int i=0;i<price.length;i++){
        if(price[i]<min){
            min = price[i];
        }else if(price[i]-min > maxRes){
            maxRes = price[i]-min;
        }
        first[i] = maxRes;
    }
    int minRes = price[price.length-2]-price[price.length-1];
    int max = price[price.length-1];
    for(int j=price.length-2;j>0;j--){
        if(price[j] >max ){
            max = price[j];
        }else if(price[j]-max < minRes){
            minRes = price[j]-max;
        }
        second[j] = minRes;
    }
    for(int i =0;i<price.length;i++){
        if(first[i]-second[j]>result){
            result = first[i]-second[i];
        }
    }
    return result;
}

//双指针问题
1.有序数据，求两个index使得和为target
public static boolean twoSum(int a[],int target){
    for(int i=0,j=a.length-1;i<j;){
        if(target==a[i]+a[j]){
           return true;
        }else if(target> a[i]+a[j]){
            j--;
        }else{
            i++;
        }
    }
    return false;
}

2.判断1个数是否是两个数的平方和
public static boolean squreTow(int target){
    int i=0;
    int j=(int)Math.sqrt(target);
    while(i<=j){
        int sum =i*i+j*j;
        if(target == sum){
            return true;
        }else if(target>sum){
            j--;
        }else{
            i++;
        }
    }
    return false;
} 

3.判断回文
public static boolean isHuiwen(String s){
    if(s==null || s.length==0){
        return false;
    }
    int i=0;
    int j=s.length-1;
    while(i<j){
        if(s.charAt(i) != s.charAt(j)){
            return false;
        }
        i++;
        j--;
    }
    return true;
}

4.归并两个数组，把结果归并到第一个数组上
public void merge(int[] nums1, int m, int[] nums2, int n) {
    int i=m-1;
    int j=n-1;
    int t=m+n-1;
    while(j>=0 || i>=0){
        if(i<0){
            nums1[t--]=nums2[j--];
        }else if(j<0){
            nums1[t--]=nums1[i--];
        }else if(nums1[i]>=nums2[j]){
            nums1[t--]=nums1[i--];
        }else{
            nums1[t--]=nums2[j--];
        }
    }
}

5.判断链表是否有环
public boolean isHuan(Node head){
    if(head==null||head.next==null){
        return false;
    }
    int first = head;
    int second = head.next;
    while(second !=null&&second.next!=null){      
        if(first == second){
            return true;
        }
        first = first.next;
        second = second.next.next;
    }
    return false;
}

