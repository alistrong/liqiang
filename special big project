1 12306(高并发，秒杀系统)

1.1
高并发的系统架构都采用分布式集群部署，服务上层有着层层负载均衡
nginx负载均衡，（轮询，加权轮询，ip hash轮询） 
nginx实现负载均衡主要通过upstream模块实现，
通过负载均衡将不同流量划分到不同机器上，每次机器处理好自己的请求，

1.2
当用户并发请求到达服务端时，关于订单，库存，付款操作流程
思路1 首先创建订单，然后扣除库存，等待用户支付，这种惯性思维保证订单不超卖，但是高并发情况下，创建订单都会访问数据库， 另外如果存在恶意下单但是不支付情况
      库存会变少，（可利用限制IP和用户的购买订单数量来优化）
思路2 创建订单，等待用户支付订单再减库存，不会少买，但是用户会创建很多订单，最后发现支付不了。
思路3 预扣库存，用户请求来了，先预扣库存，请求接口返回，然后丢消息总线去创建订单，返回订单信息给用户，然后用户再去支付

由于上述两种方案都有创建订单，就会频繁操作数据库，所以就先预扣库存，保证不超卖，然后异步生成用户订单，
对于预扣库存，还有一点优化的空间，即库存存在哪里？如何保证高并发下，正确的扣库存还能快速响应用户的请求
优化方案：本地扣库存，把一定的库存量分配到本地机器，直接在内存中减库存，然后按照之前的逻辑异步创建订单，这样避免了对数据库频繁的IO操作，只在内存中做运算
         高并发情况下，如何保证高可用，假如有两三台机器扛不住并发流量宕机了，就会有少买的情况，解决这个问题，需要对总订单做统一管理，下面有容错方案
高可用下的容错方案：服务器不仅要在本地减库存，还要远程统一减库存，为每台机器分配多余量防止宕机的情况， 即我们用redis存储统一库存，因为Redis性能非常高，      
         
         
