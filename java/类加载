类加载
概念解释：虚拟机从class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成被java虚拟机可识别的java类型

类从被加载到内存到卸载出内存，整个生命周期包括：加载，验证，准备，解析，初始化，使用，卸载。
 加载，验证，准备，初始化，这几个是顺序的，但是解析可能在初始化后面，为了支持java语言动态绑定
 
 when:什么时候进行类加载
 java虚拟机没有强制约束什么时候开始类加载，但是对于初始化阶段，有5种情况必须对类进行初始化
 1 遇到new,getstatic,putstatic或者invokestatic指令时，如果类没有初始化，则需要进行初始化
 2 用Reflect包中的方法进行类反射调用时，如果类没有初始化，则需要初始化
 3 初始化一个类时，如果父类没有初始化，则先初始化父类
 4 虚拟机启动时，需要指定一个执行的主类，先初始化这个类
 5 。。。。
 
 1 加载阶段 classLoader loadClass()
   1.1 通过类的全限定名获取类的二进制字节流，
   1.2 将这个字节流代表的静态存储结构转化成方法区中的运行时数据结构
   1.3 在内存中生成代表这个Class的对象，作为方法区中代表这个类的访问入口
 2 验证阶段，连接阶段的第一步，为了确保Class文件中的字节流所包含的信息符合虚拟机的规范，不会危害虚拟机自身
 
 3 准备阶段，正式为类变量分配内存并设置初始值，进行分配内存的类变量仅仅包含类的静态变量（在方法区分配），初始化为默认值，但是final会初始化对应值
 
 4 解析阶段，将常量池中的符号引用转化为直接引用，
 
 5 初始化阶段，执行类构造器方法clinit方法，（类变量赋值动作，static方法），父类init方法先于子类的init方法，所以父类的clinit先于子类执行，所以父类
             的static先于子类执行。
             
 双亲委派机制：
 防止核心.class被篡改，保证加载安全。
 如果有不法分子造了一个java.Lang.Object类，里面有非法代码，按照双亲委派模型，最终加载到内存的Object只能是rt.jar。核心的基础类得到保护。
   
