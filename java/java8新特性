1 接口语义增强
java8之前，接口只能包含抽象方法，当一个接口添加新的抽象方法时，所有实现该接口的类都需要重新实现这个新的抽象方法，向后不兼容，不方便，
因此java8规定接口内部可以定义默认方法，可以默认方法用default标识，可以有具体的实现，对于多个接口都含有相同的函数名的接口，而有类实现这两个接口，对于
这个同名的default方法，java规定实现类重新这个方法，并绑定具体调用哪个接口的默认方法。
java8还规定了可以定义静态方法，static，有具体的方法实现。


2 函数式接口（与lambda表达式关联很大）
什么是函数式思想：就是函数可以作为另一个函数的参数
函数式接口要求函数有且仅有一个抽象方法，可以用注解@FunctionalInterface标识

3 lambda表达式
简化匿名内部类的书写，相当于取代函数式接口，帮助我们书写简洁有效的代码
常见的用法：
Thread thread  = new Thread(new Runnable(){
    @Override
    public void run(){
        System.out.println("dd");
    }
})
简化为：
Thread thread = new Thread(
    ()->System.out.println("dd")
)

能够使用lambda表达式的依据是必须有函数式接口（内部只有一个抽象方法的接口）
具体lambda表达式实现原理：通过invokedynamic指令实现，书写lambda表达式不会产生新的类，编译之后只有一个class文件，

4 stream
stream并不是某种数据结构，它只是数据源的一种视图，这里的数据源可以是数组，java容器或者I/OChannel等，通常不用手动创建，而是调用对应的工具方法，eg:
Collection.stream(); Collection.parallelStream();
stream有以下特定：
1 为函数式编程而生，对stream的任何修改不会改变原来的数据源，
2 可消费性，stream只能被消费1次，一旦遍历完成就失效，想要再次遍历需要重新生成。

对stream的操作也分成两类
1 中间操作：中间操作只是生成了一个标记了该操作的新stream，而且是惰性的，eg: filter() match()...
2 结束操作：结束操作触发实际计算，计算发生时，会把所有中间积攒的操作以pipeline的方式执行，减少迭代次数，计算完成后stream失效 eg:forEach，max()
区分中间还是结束可以从操作返回的结果中大概预测，一般返回stream的是中间操作，否则是结束操作。

eg:
Stream<String> stream = Stream.of("1","2","3","4");
stream.forEach(str->System.out.println(str));
stream.filter(str->str.length()==3);

申请理解stream流水线：
给个case，引出问题eg:
int longestStringLengthStartingWithA
        = strings.stream()
              .filter(s -> s.startsWith("A"))
              .mapToInt(String::length)
              .max();
上述case最直白的示例：一次迭代一次操作，经过三次迭代得到最终结果，效率太差，我们不用stream方式都可以在一次迭代后完成
类库的实现着使用流水线（Pipeline）的方式巧妙的避免了多次迭代，其基本思想是在一次迭代中尽可能多的执行用户指定的操作

性能来说
元素简单操作处理遍历： stream性能不如直接for，但是多核并发性能还不错
元素复杂操作处理遍历： stream性能和for差不多，多核stream更佳。

总结：简单操作，直接for，复杂操作，可以用stream parallel

性能优化上的改进：
并发层面做了很多优化：
Future：CompletableFuture
StampedLock可用来替代ReadWriteLock
性能更优的原子类：：LongAdder,LongAccumulator以及DoubleAdder和DoubleAccumulator；






