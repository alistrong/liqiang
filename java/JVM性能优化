JVM优化目标：使用较少的内存达到较高的吞吐量和较低的延迟。

常见的JVM问题：cpu load过高 ； 请求延迟 ； tps降低 ； 内存泄露（垃圾回收时间较长，收集频率很高）
几个重要的指标：内存占用；延迟（垃圾回收导致的程序停顿）；吞吐量（用户应用程序/(用户应用程序+垃圾回收时间)）

和CAP一样，同时满足内存占用小，低延迟和高吞吐量是不可能的。

JVM调优工具：
系统运行日志：描述了代码级别的系统运行轨迹
堆栈错误信息：当系统出现问题后，可以根据堆栈信息初步定位问题所在，比如根据OutOfMemoryError StackOverFlowError.
GC日志：程序启动后用-XX:+PrintGCDetails 可以把gc的日志详细记录一下，然后分析gc日志发现问题。
线程快照：根据线程快照可以看到线程某一时刻的状态，当系统可能存在请求超时，死循环，死锁时，可以根据线程快照确定这个问题，jstack pid,可以dump当前进程下
         所有线程的运行状态。
堆转储快照：程序启动后可以用-XX:+HeapDumpOnOutOfMemory,当内存发生溢出时，把当前内存的快照以文件形式进行转储。

调优调查问题常用的命令：
1 jps可以查看虚拟机启动的所有进程、执行主类的全名、JVM启动参数
2 jstat监视虚拟机信息， jstat -gc pid  1000 10  每1000毫秒打印一次gc情况，总共打印10次。
3 jmap监视堆内存信息，jmap -histo pid 可以打印当前堆中所有每个类的实例数量和内存占用。
                    ps: num      instances(实例个数)   bytes(占用大小)     class name
                         1          234               234242472            [B (byte类型)   [C (字符类型char)  [I (int类型)
                         2         23242              420992348          <methodKlass>
                     jmap -dump:format=b,file= /opt/.../a.log 2344  转储堆内存快照到指定文件                  
4 利用插件或者推行工具查看分析内存快照  MAT  ,jhat

JVM调优经验：
JVM配置方面一般先用默认配置，一些建议如下：

-Xms(初始化堆大小) 和 -Xmx（最大堆内存）一般设置一样，
--（1）新生代一般设置的大一些，让对象在新生代多存活一段时间，每次moior gc尽可能多回收一些对象，防止对象进入老年代的机会。进而减少fullgc的频率
--（2）如果老年代使用CMS收集器（并行收集速度很快，收集过程比较耗时的并发标记和并发清除阶段可以和用户线程同时工作），
代码方面--
--（3）尽量避免创建过大的对象和数组（过大的对象可能直接进入老年代，如果是短命对象可能触发full gc）
--（4）避免加载大量数据，如读取excel数据，一次性从数据库读取大量数据。可以分批读取，用完尽快清空引用
--（5）

                    
