JIT即时编译

.java ==前端编译==> .class  ====JIT或解释器进行运行编译===> 机器码
相对C、C++等所有优化都是在编译期间完成，运行期间的监控仅作为基础的优化措施无法进行，即调用频率预测，分支频率预测等
而java在运行时编译可以进行优化措施，
最初字节码由解释器器完成编译，当虚拟机发现某个方法或者代码块调用很频繁时，会认为这块代码是热点代码。
为了提高热点代码的执行效率，在运行时，JIT会将这块代码编译成与本地平台相关的机器码，然后缓存起来保存在内存中。
热点探测是JIT优化的前提，热点探测是基于计数器的热点探测，为每个方法进行调用统计，如果执行次数超过一定阈值就认为他是热点方法，从而触发JIT编译优化

编译优化技术

1 方法内联
通常一个方法的调用伴随着入栈和出栈，调用之前保护现场并记忆执行的地址，调用完恢复现场按照原来保存的地址执行，因此会产生时间和空间的消耗，而对于那些方法
本来不大又频繁调用的情况，这种空间和时间消耗很大，因此内联的优化行为是将目标方法的代码直接复制到调用方法里避免真实的方法调用。
2 逃逸分析
逃逸分析是判断一个对象是否被外部方法或者外部线程访问的一项技术，编译器会跟进逃逸分析结果进行代码优化
2.1栈上分配（目前虚拟机支持不好）
正常一个对象是在堆中分配的，如果对象不再使用，GC进行回收，而这种堆中的分配和回收耗性能，这个时候，逃逸分析如果发现这个对象只在方法中使用，就会将对象分配
到栈上。
2.2 锁消除
如果发现一个锁只被一个线程使用，就会去掉加锁过程
eg  public static String getString(String s1, String s2) {
        StringBuffer sb = new StringBuffer();
        sb.append(s1);
        sb.append(s2);
        return sb.toString();
    }
此处 StringBuffer 和 StringBuilder性能差不多

jvm调优（一般JVM优化和内存分配，gc等都相关，相辅相成）
1 降低minor gc频率，如果新生代空间较小，很快分配完，
2 调整堆内存减少full gc
3 由于FullGC的成本远高于MinorGC,某些情况尽可能将对象分配在年轻代，因此分配一个合理的年轻代空间，最大限度避免新对象直接进入老年代的情况
4 对于大对象由于占用内存比较多，它的出现可能扰乱年轻代GC，因此尝试在年轻代分配大对象，可能导致空间不足，为了有足够空间容纳大对象，
JVM不得不将年轻代的对象移动到老年代，即可能要移动大量小的对象进入年老代，这对GC不利，基于以上原因，可以直接将大对象分配到老年代，
保证年轻代的结构完整性。如果是大对象又是短命对象，对于GC又是一种灾难，因此，在开发过程中，尽可能避免使用短命的大对象。
可以设置大对象进入老年代的阈值，
5 稳定的java堆，设置-Xms和-Xmx的大小一致，
6 增大吞吐量提升系统性能，减少系统执行垃圾回收总时间，-XX:+UseParallelGC -XX:ParallelGC-Threads=20 -XX:+UserParallelOldGC
