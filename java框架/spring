spring
问题1 IOC inversion of control
what?
对象的实例化权限反转给容器，平常我们一般自己new，即由应用程序控制，所谓反转是将权限反转给容器，而应用程序只需提供对象的类型即可。
why?
1 对象的实例化不是一个简单的事，如对象关系很复杂，依赖关系需要程序员维护，非常头疼
2 解耦，由容器维护具体的对象
3 托管类的产生过程，需要在类的产生过程中做一些处理，比如代理。
在没有spring之前的样子,最原始最基础的情况：

首先有一个web服务器（tomcat），启动后监听一个端口号的http请求，然后把监听到的请求转发给servlet，servlet处理请求
浏览器----Http request-->(port)tomcat----->自己写的servlet类
public class MyServlet{
    private MyService myService= new MyServiceImpl();
    public void doPost(HttpServletRequest request){
        //处理请求
        myService.doSomething(request);
    }
}
即servlet里面new object，然后调用对象的方法，这样做的问题在于，在我们的系统中有几十个地方，都是使用myService = new MyServiceImpl(),即耦合在一起
比如我们不想用MyServiceImpl，想用新的类NewServiceImpl，此时我们需要改动几十个地方。改动成本大，即代码里各个类耦合在一起，出现一点变动，需要改动很多
由此出现spring IOC
上述代码就改为：
@Controller
public class Controller{
    @Resource
    private MyService myService;
    public void doPost(HttpServletRequest request){
        //处理请求
        myService.doSomething(request);
    }
}
@Service 
public class MyServiceImpl implements MyService{
    
}
如果myService想改成NewMyServiceImpl就可以把原来的类上面的注解去掉，@Service注解加到NewMyServiceImpl类上。
tomcat-----启动----->spring容器（扫描我们所有的代码，看注解或者xml配置，创建对应实例bean，然后对bean对象之间的引用关系进行依赖注入）
主要通过反射技术实现。

spring核心架构
bean实例生命周期 从创建--使用--销毁
1 如果要使用bean，spring首先会实例化这个bean，
2 看看有没有依赖引用，如果有，把相应的依赖引用的bean也实例化，即对象的属性注入
3 处理aware接口，看看对象是否实现了***aware接口，把相关***Aware实例注入到这个bean
  比如这个bean实现了ApplicationContextAware接口，spring容器就会调用setApplicationContext()方法，把这个bean传入spring上下文。
4 如果想对bean进行自定义处理，让bean实现BeanPostProcessor()接口，将调用postProcessorBeforeinital(object o,String s)
5 初始化方法
6 如果bean实现了beanPostProccesor接口，就会调用postProcessorAfterInitilzation()接口,进行初始化后的接口调用。
7 如果bean不需要使用了，调用对应的销毁方法destory

另外一个角度回答：
1 实例化
2 属性赋值
3 初始化 //初始化前后都有beanProcessor对应的方法，AOP实现的关键点，即初始化之前或者之后都可以调用一些方法
4 销毁







问题2 AOP

问题引入：
想要在方法前面执行一些逻辑，方法执行完后做一些逻辑：
eg: 1 事务开启， 2 打印日志，耗时统计
好多这样的方法，你都要在方法之前调用逻辑，方法之后调用逻辑

class ProxyClassA{
    Class A;
    public void doMethod(){//实现一样的方法
       //通用逻辑
       A.doMethod();
       //通用逻辑
    }
}
//即生成动态代理对象ProxyClassA,把你原始的对象ClassA注入进去，调用动态代理类的doMethod方法时，走通用逻辑，然后再调你真实类的方法，

cglib动态代理和jdk动态代理
1 如果你的类有某个接口（即没有对应的实现），走JDK动态代理，生成跟实现了一样的接口的动态代理类，
  动态代理只能对接口产生代理，不能对类产生代理

2 如果类没有接口（有方法，但是方法都有具体的实现），改用cglib来生成动态代理，它是生成你的类的一个子类，覆盖你的方法，


问题3 循环依赖--属性自动注入
上述问题会涉及到spring bean的生命周期及bean实例化的大概过程

什么是循环依赖
Class A{
  @Autowired
  private B b;
}

Class B{
  @Autowired
  private A a;
}

//初始化spring容器
AnnotiationConfigApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
//获取对象实例
ac.getBean(A.class);

spring 单例模式下默认支持循环依赖，
在类A中如何把B类注入进来的？依赖注入是什么时候完成的？
单例情况下，是在初始化spring容器时完成依赖注入
原形情况下，是在getBean时完成依赖注入

在初始化spring容器过程中做了很多事情，其中包括bean实例初始化，而在bean实例初始化（bean生命周期）也包括很多步骤1.2.3.。。。n，即需要了解在第几步完成
属性注入的呢？

下面看spring如何初始化一个bean的过程：
首先理解bean和java对象的概念
bean一定是java对象，但是java对象不一定是bean对象。

class------>BeanDefinition------->

先看普通类的实例化过程 .java---->.class----->java对象
再看spring bean的实例化过程：
java----->class------>并不是直接new对象放到spring容器中，因为有些是原形类型，有些是懒加载，而是把类的一些信息拿到放入到beanDefinition子类对象中。
然后把对应的BeanDefintion对象放入到map里，-------> 然后遍历map拿到类的一些信息进行new出来对象放入到单例池中。
实例化过程中，在生成BeanDefinition和new出对象之间spring预留了一个扩展方法接口，用于spring扩展。


bean实例化过程：
先做一系列校验判断（beanname合法，是否懒加载，是否单例） 
然后再去单例池中根据name 获取，获取不到
然后再判断是否在创建实例过程中（不涉及循环依赖，所以false），
然后再进行一系列校验
进行java对象的初始化，然后进行属性注入，最后完成bean实例化

涉及到的map缓存

1 singletonObjects 单例池，也就是通俗意义上的spring容器，单例对象只会实例化一次，需要缓冲池存放，原形模式不用。
2 singletonFactories 工厂对象，可以解决循环依赖，提前暴露一个工厂即“半成品”，
why?可以对这个半成品进行加工升华，为什么需要升华加工半成品bean?代理，  可以处理aop。   
3 earlySingletonObjects 和1几乎一样，2级缓存删除出来，放入到3级缓存中。

二级 和 三级 缓存是针对循环依赖而做的，对于非循环依赖的对象，直接使用单例池。

为啥弄了三级缓存？
防止重复创建
对于Class C{
   A a;
}

A类bean实例化，首先对象初始化，如果支持循环依赖，把对应的工厂放入第二个缓存中，其中属性B需要注入，getBean(B),首先判断B是否实例化（没有），从容器中拿，
拿不到，进而从第三个缓存中拿，也拿不到，开始new B，进而注入属性A，getBean(A),这个时候就可以拿到了{从单例池拿不到&&正在创建过程中，从第二个缓存中拿到}
半成品，只是对象，不是bean实例



